package com.utilisuite.utilisuite.controllers;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.utilisuite.utilisuite.models.User;
import com.utilisuite.utilisuite.repositories.UserRepository;

@Controller // This means that this class is a Controller
// @CrossOrigin(origins = "http://localhost:8080") // Adds CORS to entire controller
@RequestMapping(path="/api/users") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
            // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    // GET route for ALL users
    @GetMapping(path="")
    public @ResponseBody Iterable<User> getAllUsers() {
        return userRepository.findAll();
    }

    // CREATE route for new user
    @PostMapping(path="") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody User reqUser) {
        // Creates new User
        User nUser = new User();

        // Sets property values for new User
        nUser.setUserName(reqUser.getUserName());
        nUser.setEmail(reqUser.getEmail());
        nUser.setPassword(reqUser.getPassword());
        nUser.setFirstName(reqUser.getFirstName());
        nUser.setLastName(reqUser.getLastName());

        // Sets property values for User util display preferences
        nUser.setTipCalculator(reqUser.getTipCalculator());
        nUser.setPercentageCalculator(reqUser.getPercentageCalculator());


        userRepository.save(nUser);
        return "Saved";
    }

    // SHOW route for specific user
    @GetMapping(path="/{id}")
    public @ResponseBody Optional<User> getUser (@PathVariable int id) {
        return userRepository.findById(id);
    }

    // UPDATE route for specific user
    @PutMapping(path="/update")
    public @ResponseBody User updateUser (@RequestBody User reqUser) {
        return userRepository.save(reqUser);
    }

    // DELETE route for specific user
    @DeleteMapping(path="/{id}")
    public @ResponseBody String deleteUser (@PathVariable int id) {
        userRepository.deleteById(id);  
        return "Deleted";
    }
}

