package com.utilisuite.utilisuite.controllers;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.utilisuite.utilisuite.models.Quote;
import com.utilisuite.utilisuite.repositories.QuoteRepository;

@Controller // This means that this class is a Controller
// @CrossOrigin(origins = "http://localhost:8080") // Adds CORS to entire controller
@RequestMapping(path="/api/quotes") // This means URL's start with /demo (after Application path)
public class QuoteController {
    @Autowired // This means to get the bean called userRepository
            // Which is auto-generated by Spring, we will use it to handle the data
    private QuoteRepository quoteRepository;

    // GET route for ALL quotes
    @GetMapping(path="")
    public @ResponseBody Iterable<Quote> getAllQuotes() {
        return quoteRepository.findAll();
    }

    // CREATE route for new quote
    @PostMapping(path="") // Map ONLY POST Requests
    public @ResponseBody Quote addNewQuote (@RequestBody Quote reqQuote) {
        // Creates new User
        Quote newQuote = new Quote();

        // Sets property values for new User
        newQuote.setWhoSaid(reqQuote.getWhoSaid());
        newQuote.setQuote(reqQuote.getQuote());

        return quoteRepository.save(newQuote);
    }

    // SHOW route for specific quote
    @GetMapping(path="/{id}")
    public @ResponseBody Optional<Quote> getQuote (@PathVariable int id) {
        return quoteRepository.findById(id);
    }

    // UPDATE route for specific quote
    @PutMapping(path="/{id}")
    public @ResponseBody Quote updateQuote (@PathVariable int id, @RequestBody Quote reqQuote) {
        Quote newQuote = reqQuote;
        newQuote.setId(id);
        return quoteRepository.save(newQuote);
    }

    // DELETE route for specific quote
    @DeleteMapping(path="/{id}")
    public @ResponseBody String deleteQuote (@PathVariable int id) {
        quoteRepository.deleteById(id);
        return "deleted...";
    }
}
